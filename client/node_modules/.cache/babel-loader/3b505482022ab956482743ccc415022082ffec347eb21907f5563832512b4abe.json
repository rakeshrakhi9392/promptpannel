{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useStore } from \"../../store\";\nimport { getChatHistory, sendChatMessage, closeChatSubscription } from \"../../socketConn\";\nimport { useUserDetails } from \"./useUserDetails\";\nexport const useChatHistory = channelId => {\n  _s();\n  const {\n    chatHistory\n  } = useStore();\n  const {\n    isLogged,\n    username\n  } = useUserDetails();\n  useEffect(() => {\n    // Fetch chat history for the given channelId\n    getChatHistory(channelId);\n\n    // Cleanup function to close the subscription when channelId changes or component unmounts\n    return () => {\n      closeChatSubscription(channelId);\n    };\n  }, [channelId]); // Dependency array with channelId to trigger the effect when it changes\n\n  const sendMessage = message => {\n    sendChatMessage(channelId, {\n      author: isLogged ? username : \"Guest\",\n      content: message\n    });\n  };\n  return {\n    messages: (chatHistory === null || chatHistory === void 0 ? void 0 : chatHistory.channelId) === channelId ? chatHistory.messages : [],\n    sendMessage\n  };\n};\n_s(useChatHistory, \"2lIHPQ0IjH1gisdjgOkgoIgkI+A=\", false, function () {\n  return [useStore, useUserDetails];\n});","map":{"version":3,"names":["useEffect","useStore","getChatHistory","sendChatMessage","closeChatSubscription","useUserDetails","useChatHistory","channelId","_s","chatHistory","isLogged","username","sendMessage","message","author","content","messages"],"sources":["C:/Users/madas/Downloads/MostlyStream-master/MostlyStream-master/client/src/shared/hooks/useChatHistory.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useStore } from \"../../store\";\nimport { getChatHistory, sendChatMessage, closeChatSubscription } from \"../../socketConn\";\nimport { useUserDetails } from \"./useUserDetails\";\n\nexport const useChatHistory = (channelId) => {\n  const { chatHistory } = useStore();\n  const { isLogged, username } = useUserDetails();\n\n  useEffect(() => {\n    // Fetch chat history for the given channelId\n    getChatHistory(channelId);\n\n    // Cleanup function to close the subscription when channelId changes or component unmounts\n    return () => {\n      closeChatSubscription(channelId);\n    };\n  }, [channelId]);  // Dependency array with channelId to trigger the effect when it changes\n\n  const sendMessage = (message) => {\n    sendChatMessage(channelId, {\n      author: isLogged ? username : \"Guest\",\n      content: message,\n    });\n  };\n\n  return {\n    messages: chatHistory?.channelId === channelId ? chatHistory.messages : [],\n    sendMessage,\n  };\n};\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,cAAc,EAAEC,eAAe,EAAEC,qBAAqB,QAAQ,kBAAkB;AACzF,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,MAAMC,cAAc,GAAIC,SAAS,IAAK;EAAAC,EAAA;EAC3C,MAAM;IAAEC;EAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC;EAClC,MAAM;IAAES,QAAQ;IAAEC;EAAS,CAAC,GAAGN,cAAc,CAAC,CAAC;EAE/CL,SAAS,CAAC,MAAM;IACd;IACAE,cAAc,CAACK,SAAS,CAAC;;IAEzB;IACA,OAAO,MAAM;MACXH,qBAAqB,CAACG,SAAS,CAAC;IAClC,CAAC;EACH,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC,CAAC,CAAE;;EAElB,MAAMK,WAAW,GAAIC,OAAO,IAAK;IAC/BV,eAAe,CAACI,SAAS,EAAE;MACzBO,MAAM,EAAEJ,QAAQ,GAAGC,QAAQ,GAAG,OAAO;MACrCI,OAAO,EAAEF;IACX,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IACLG,QAAQ,EAAE,CAAAP,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEF,SAAS,MAAKA,SAAS,GAAGE,WAAW,CAACO,QAAQ,GAAG,EAAE;IAC1EJ;EACF,CAAC;AACH,CAAC;AAACJ,EAAA,CAzBWF,cAAc;EAAA,QACDL,QAAQ,EACDI,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}